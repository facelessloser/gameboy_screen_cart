#include<Arduino.h>
#include<U8g2lib.h>
 
#ifdef U8X8_HAVE_HW_SPI
#include<SPI.h>
#endif
#ifdef U8X8_HAVE_HW_I2C
#include<Wire.h>
#endif
 
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);
 
// Copy the contents of your .xbm file below
#define tetris_width 103
#define tetris_height 32
// unsigned char tetris_bits[] = {
static const unsigned char tetris_bits[] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xbf, 0xff,
   0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xbf,
   0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3,
   0xbf, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xf3, 0xbf, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xf3, 0xbf, 0xff, 0x7f, 0x1f, 0xc0, 0x8f, 0x0f, 0xff, 0x03, 0xf0,
   0xf9, 0xe0, 0x83, 0x8f, 0x0f, 0x7c, 0x9f, 0x8f, 0x8f, 0x0f, 0xff, 0xf3,
   0xf1, 0xf9, 0xe0, 0x83, 0x8f, 0x0f, 0x7c, 0x9f, 0x8f, 0x8f, 0x0f, 0xff,
   0xf3, 0xf1, 0xf9, 0xe0, 0x83, 0x8f, 0x0f, 0x7c, 0x9f, 0x8f, 0x8f, 0x0f,
   0xff, 0xf3, 0xf1, 0xf9, 0xe0, 0x83, 0x8f, 0x0f, 0x7c, 0x9f, 0xcf, 0x8f,
   0x0f, 0xff, 0xf3, 0xf1, 0xf9, 0xf0, 0x83, 0x8f, 0x1f, 0x7c, 0x9f, 0x8f,
   0x87, 0x0f, 0xff, 0xf3, 0xf1, 0xf9, 0xf8, 0x83, 0x8f, 0x3f, 0x7c, 0x80,
   0x0f, 0x80, 0x0f, 0x00, 0xf0, 0x01, 0xf8, 0xfc, 0x81, 0x0f, 0x7f, 0x00,
   0x80, 0x0f, 0x80, 0x0f, 0x00, 0xf0, 0x01, 0xf8, 0xff, 0x80, 0x0f, 0xfe,
   0x00, 0x80, 0x0f, 0x80, 0xff, 0x03, 0xf0, 0x01, 0xf8, 0x7f, 0x80, 0x0f,
   0xfc, 0x01, 0x80, 0x0f, 0x80, 0xff, 0x03, 0xf0, 0x01, 0xf8, 0x3f, 0x80,
   0x0f, 0xf8, 0x03, 0x80, 0x0f, 0x80, 0xff, 0x03, 0xf0, 0x01, 0xf8, 0x7f,
   0x80, 0x0f, 0xf0, 0x07, 0x80, 0x0f, 0x80, 0xff, 0x03, 0xf0, 0x01, 0xf8,
   0x7f, 0x80, 0x0f, 0xe0, 0x0f, 0x80, 0x0f, 0x80, 0xff, 0x03, 0xf0, 0x01,
   0xf8, 0xff, 0x80, 0x0f, 0xc0, 0x1f, 0x80, 0x0f, 0x80, 0x0f, 0x00, 0xf0,
   0x01, 0xf8, 0xfb, 0x80, 0x0f, 0x80, 0x3f, 0x80, 0x0f, 0x80, 0x0f, 0x00,
   0xf0, 0x01, 0xf8, 0xf9, 0x80, 0x0f, 0x00, 0x7f, 0x80, 0x0f, 0x80, 0x0f,
   0x00, 0xf0, 0x01, 0xf8, 0xf8, 0x81, 0x0f, 0x00, 0x7e, 0x80, 0x0f, 0x80,
   0x0f, 0x1f, 0xf0, 0x01, 0xf8, 0xf0, 0x81, 0x8f, 0x0f, 0x7c, 0x80, 0x0f,
   0x80, 0x0f, 0x1f, 0xf0, 0x01, 0xf8, 0xf0, 0x81, 0x8f, 0x0f, 0x7c, 0x80,
   0x0f, 0x80, 0x0f, 0x1f, 0xf0, 0x01, 0xf8, 0xe0, 0x83, 0x8f, 0x0f, 0x7c,
   0x80, 0x0f, 0x80, 0x0f, 0x1f, 0xf0, 0x01, 0xf8, 0xe0, 0x83, 0x8f, 0x0f,
   0x7c, 0x80, 0x0f, 0x80, 0x0f, 0x1f, 0xf0, 0x01, 0xf8, 0xe0, 0x83, 0x8f,
   0x0f, 0x7c, 0x80, 0x1f, 0xc0, 0x0f, 0x1f, 0xf0, 0x01, 0xf8, 0xe0, 0x87,
   0x8f, 0x0f, 0x7c, 0xe0, 0x7f, 0xf0, 0xff, 0x1f, 0xfc, 0x0f, 0xfe, 0xc7,
   0xff, 0xbf, 0xff, 0x7f, 0xe0, 0x7f, 0xf0, 0xff, 0x1f, 0xfc, 0x0f, 0xfe,
   0xc7, 0xff, 0xbf, 0xff, 0x7f, 0xe0, 0x7f, 0xf0, 0xff, 0x1f, 0xfc, 0x0f,
   0xfe, 0x87, 0xff, 0xbf, 0xff, 0x7f, 0xe0, 0x7f, 0xf0, 0xff, 0x1f, 0xfc,
   0x0f, 0xfe, 0x87, 0xff, 0xbf, 0xff, 0x7f, 0xe0, 0x7f, 0xf0, 0xff, 0x1f,
   0xfc, 0x0f, 0xfe, 0x87, 0xff, 0xbf, 0xff, 0x7f };
void draw(void) {
// graphic commands to redraw the complete screen should be placed here
//u8g2.drawXBMP(x,y,width,height,btimap);
u8g2.drawXBMP( 5, 10, tetris_width, tetris_height, tetris_bits);
}
 
void setup(void) {
u8g2.begin();
u8g2.setFlipMode(1);
}
 
void loop(void) {
// picture loop
u8g2.firstPage();
do {
draw();
} while( u8g2.nextPage() );
 
// rebuild the picture after some delay
delay(1000);
}
